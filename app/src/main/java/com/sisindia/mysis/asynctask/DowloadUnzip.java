package com.sisindia.mysis.asynctask;import android.annotation.SuppressLint;import android.content.Context;import android.content.SharedPreferences;import android.os.AsyncTask;import android.os.Environment;import android.util.Log;import android.widget.Toast;import java.io.BufferedInputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.URL;import java.net.URLConnection;import java.util.zip.ZipEntry;import java.util.zip.ZipFile;import java.util.zip.ZipInputStream;/** * Created by medchiheb at octadev on 4/07/2017. */public class DowloadUnzip {    //INITIALIZATION OF DOWNLOAD ZIP FROM URL    private String zipFile;    private Context activityContext;    private GetResultFromZip getResultFromZip;    File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/bluetooth");    //INITIALIZATION OF UNZIP FILE FROM FILE SYSTEM    private final String SDPath = Environment.getExternalStorageDirectory().getAbsolutePath();    private final String FilePath = SDPath + File.separator + "/temp.zip";    private final String UnzipPath = SDPath + "/UnzipExample/";    private SharedPreferences.Editor editor;    //CONSTRUCTOR    public DowloadUnzip(Context context) {        Log.e("andar)_aaya", "");        this.activityContext = context;        getResultFromZip = (GetResultFromZip) context;        zipFile = Environment.getExternalStorageDirectory() + "/temp.zip";        editor = activityContext.getSharedPreferences("checkDownload_KEY", Context.MODE_PRIVATE).edit();    }    public String getZipFile() {        return zipFile;    }    public void setZipFile(String zipFile) {        this.zipFile = zipFile;    }    //DOWNLOAD ZIP FILE IMPLEMENTED BY VIKAS    @SuppressLint("StaticFieldLeak")    public void dowload(final String zipurl) {        new AsyncTask<String, String, String>()        {            String result = "";            @Override            protected void onPreExecute() {                super.onPreExecute();            }            @Override            protected String doInBackground(String... params) {                int count;                try {                    URL url = new URL(zipurl);                    Log.e("url)_aaya", "" + url);                    URLConnection conexion = url.openConnection();                    conexion.connect();                    int lenghtOfFile = conexion.getContentLength();                    InputStream input = new BufferedInputStream(url.openStream());                    OutputStream output = new FileOutputStream(zipFile);                    byte data[] = new byte[1024];                    long total = 0;                    while ((count = input.read(data)) != -1) {                        total += count;                        publishProgress("" + (int) ((total * 100) / lenghtOfFile));                        output.write(data, 0, count);                    }                    output.close();                    input.close();                    result = "true";                } catch (Exception e) {                    result = "false";                }                return result;            }            @Override            protected void onPostExecute(String mmmm) {                super.onPostExecute(result);                if (result.equalsIgnoreCase("true")) {                    try {                        Log.e("result", "" + result);                        unzip();                    } catch (IOException e) {                        // TODO Auto-generated catch block                        e.printStackTrace();                    }                } else {                }            }        }.execute(zipurl);    }    //UNZIPPING AFTER DOWNLOADING IMPLEMENTED BY VIKAS    public void unzip() throws IOException {        new AsyncTask<String, Void, Boolean>() {            @Override            protected Boolean doInBackground(String... params) {                boolean isDownloaded = false;                File dir = new File(UnzipPath);                // create output directory if it doesn't exist                if (!dir.exists()) dir.mkdirs();                FileInputStream fis;                //buffer for read and write data to file                byte[] buffer = new byte[1024];                try {                    ZipFile zip = new ZipFile(FilePath);                    fis = new FileInputStream(FilePath);                    ZipInputStream zis = new ZipInputStream(fis);                    ZipEntry ze = null;                    long total = 0;                    int progress = 0;                    while ((ze = zis.getNextEntry()) != null) {                        String fileName = ze.getName();                        File newFile = new File(UnzipPath + File.separator + fileName);                        Log.e("klhfg", "Unzipping to " + newFile.getAbsolutePath());                        //create directories for sub directories in zip                        if (!fileName.contains(".")) {                            newFile.mkdirs();                        } else {                            FileOutputStream fos = new FileOutputStream(newFile);                            int len;                            while ((len = zis.read(buffer)) > 0) {                                fos.write(buffer, 0, len);                            }                            fos.close();                        }                        //close this ZipEntry                        zis.closeEntry();                        total++;                        int progress_temp = (int) total * 100 / zip.size();//                        publishProgress(""+ progress_temp);                        if (progress_temp % 10 == 0 && progress != progress_temp) {                            progress = progress_temp;                        }                    }                    //close last ZipEntry                    zis.closeEntry();                    zis.close();                    fis.close();                    isDownloaded = true;                } catch (Exception e) {                    Log.e("holifdh", "Exception : " + e.toString());                }                return isDownloaded;            }            @Override            protected void onPreExecute() {                super.onPreExecute();            }            @Override            protected void onPostExecute(Boolean b) {                Toast.makeText(activityContext, "completed", Toast.LENGTH_LONG).show();                super.onPostExecute(b);                editor.putString("check_Key", "download_done");                editor.commit();                getResultFromZip.result("download_done");            }        }.execute(zipFile);    }    public interface GetResultFromZip {        public void result(String b);    }}